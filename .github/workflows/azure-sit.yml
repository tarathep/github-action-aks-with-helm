name: SIT Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY_NAME: crwebdemo
  CLUSTER_NAME: aks-demo-webapp
  CLUSTER_RESOURCE_GROUP: rg-github-action-001
  NAMESPACE: demo-webapp-sit
  CONTAINER_REGISTRY_URL: crwebdemo.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: webapp

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Artifact

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: v0.1

    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '8'

    - name: Build with Maven
      run: mvn clean install -DskipTests
    
    - name: Set RELEASE_VERSION
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: artifact-${{ env.RELEASE_VERSION }}
        path: '${{ github.workspace }}/target/*.jar'

  push:
    runs-on: ubuntu-latest
    name: Build Image
    needs: build

    steps:
    # Want Dockerfile
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: v0.1
    
    - name: Set RELEASE_VERSION
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact-${{ env.RELEASE_VERSION }}
        path: '${{ github.workspace }}/target'
      
      # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
      # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-sit
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-sit

    
  deploy_sit:
    runs-on: ubuntu-latest
    needs: push
    name: Deploy to SIT
    environment:
      name: SIT
      url: 'http://20.195.33.238/hello'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: v0.1

      - name: Install Helm
        uses: Azure/setup-helm@v1
        with:
          version: v3.3.1

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -


      - name: Set imagePullSecret
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.CONTAINER_REGISTRY_SECRET }}
        id: create-secret

      - name: Run Helm Deploy
        run: |
          helm upgrade --install --create-namespace --atomic --wait --namespace ${{ env.NAMESPACE }} ${{ env.APP_NAME }} helm/ --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${GITHUB_REF#refs/*/}-sit --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}

  e2e_test:
    runs-on: ubuntu-latest
    name: E2E with Robot Framework
    needs: deploy_sit

    steps:
    # checkout tag
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: v0.1

    - name: Robot Framework Action
      uses: tarathep/robotframework-github-action@v1.0
      with:
        tests_dir: '${{ github.workspace }}/tests/robot'
        reports_dir: '${{ github.workspace }}/tests/robot/reports'
    
    - name: Upload Report Robot Test
      uses: actions/upload-artifact@v2
      with:
        name: Automate Test Reports
        path: '${{ github.workspace }}/tests/robot/reports/*'
    
  














# ------------- BACKUP -----------

# name: SIT Pipeline

# on:    
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch:


# # 
# jobs:
#   tagging:
#     name: Tagging
#     runs-on: ubuntu-latest
  
#     steps:
#     - uses: actions/checkout@v2
    
#     - name: Test
#       run: |
#         git describe --tags --abbrev=0




  # deploy_sit:
  #   name: Deploy to SIT
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: SIT
  #     url: 'http://xxxx/hello'
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #     with:
  #       ref: main
  #   - name: TAG
  #     run: GIT_TAG=$(git describe --tags --abbrev=0)

  #   - name: ECHO
  #     run: echo $GIT_TAG

  #   - uses: actions/github-script@v4
  #     name: make tag name
  #     env:
  #         ENV_VAR: $MY_VAR
  #     with:
  #       script: |
  #         const { ENV_VAR } = process.env
  #         console.log(`hello ${ENV_VAR}`)


  #   - name: create tag
  #     run: |
  #       git tag 0.1.4
  #       git push origin --tags 0.1.4

  #   - name: echo ref
  #     run: echo ${{ github.ref }}



# name: SIT Pipeline
# on:
#   push:
#     tags:
#       - 'v*'
# jobs:
#   tagging:
#     name: Tagging
#     runs-on: ubuntu-latest
  
#     steps:
#       - uses: actions/checkout@v2
      
#       - name: Set env
#         run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
#       - name: Test
#         run: |
#           echo $RELEASE_VERSION
#           echo ${{ env.RELEASE_VERSION }}
#           echo ${GITHUB_REF#refs/*/}

    # deploy_sit:
    #   name: Deploy to SIT
    #   runs-on: ubuntu-latest
      
    #   environment:
    #     name: SIT
    #     url: 'http://xxxx/hello'

    #     steps:
    #       - name: check
    #         run: echo check

      



