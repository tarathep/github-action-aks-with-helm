name: DEV-webapp to AKS with Helm

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  REGISTRY_NAME: crwebdemo
  CLUSTER_NAME: aks-demo-webapp
  CLUSTER_RESOURCE_GROUP: rg-github-action-001
  NAMESPACE: demo-webapp-dev
  CONTAINER_REGISTRY_URL: crwebdemo.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: webapp

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Artifact
    # needs: unittest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '8'

    - name: Build with Maven
      run: mvn clean install

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target/*.jar'

  push:
    runs-on: ubuntu-latest
    name: Build Image
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target'
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: '${{ github.workspace }}/target'
      
      # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
      # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Install Helm
        uses: Azure/setup-helm@v1
        with:
          version: v3.3.1

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # Resource Group Name
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          # AKS Cluster Name
          cluster-name: ${{ env.CLUSTER_NAME }}


      - name: Set imagePullSecret
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ secrets.CONTAINER_REGISTRY_SECRET }}
        id: create-secret

      - name: Run Helm Deploy
        run: |
          helm upgrade --install --create-namespace --atomic --wait --namespace ${{ env.NAMESPACE }} helm/ --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}








#  ON RELEASE TO PROD
# on:
#   release:
#     types: [created]

# env:
#   AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
#   AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
#   NODE_VERSION: '10.x'                # set this to the node version to use

# jobs:
#   build-and-deploy:
#     name: Build and Deploy
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#     - uses: actions/checkout@v2
#     - name: Use Node.js ${{ env.NODE_VERSION }}
#       uses: actions/setup-node@v2
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#     - name: npm install, build, and test
#       run: |
#         # Build and test the project, then
#         # deploy to Azure Web App.
#         npm install
#         npm run build --if-present
#         npm run test --if-present
#     - name: 'Deploy to Azure WebApp'
#       uses: azure/webapps-deploy@v2
#       with:
#         app-name: ${{ env.AZURE_WEBAPP_NAME }}
#         publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#         package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
